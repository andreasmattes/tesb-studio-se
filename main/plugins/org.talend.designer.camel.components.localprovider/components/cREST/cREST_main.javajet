<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.IProcess
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.JavaResourcesHelper
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.designer.codegen.config.NodeParamsHelper
    org.talend.designer.codegen.config.CamelEndpointBuilder
    java.util.List
    org.talend.core.model.process.ProcessUtils
"
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;

	INode node = (INode)codeGenArgument.getArgument();

	IProcess process = node.getProcess();

	String cid = node.getUniqueName();

	NodeParamsHelper paramsHelper = new NodeParamsHelper(node);

    boolean hasOidcClientAuthentication = "true".equals(ElementParameterParser.getValue(node, "__ENABLE_SECURITY__"))
                                              && "OIDC".equals(ElementParameterParser.getValue(node, "__SECURITY_TYPE__"))
                                              && !node.getIncomingConnections().isEmpty();

	CamelEndpointBuilder builder = CamelEndpointBuilder.getBuilder();
	CamelEndpointBuilder builderRT = CamelEndpointBuilder.getBuilder();
	builder.useComponentColon(false);
	builder.useDoubleSlash(false);
	builderRT.useComponentColon(false);
	builderRT.useDoubleSlash(false);


%>

<%
	String endpointUrlRT = ElementParameterParser.getValue(node, "__URL__");

	String endpointUrlStudio = endpointUrlRT;

	if(node.getIncomingConnections().isEmpty()) {

        if (endpointUrlRT != null && !endpointUrlRT.trim().isEmpty() && !endpointUrlRT.contains("://")) {
            if (endpointUrlRT.startsWith("\"/services")) {
                endpointUrlRT = endpointUrlRT.replaceFirst("/services","");
            }
            if (!endpointUrlRT.startsWith("/")) {
            	if(!endpointUrlRT.startsWith("context.")){
            		endpointUrlRT = endpointUrlRT;
            	}
            }
        }
        String defaultUri = (String) System.getProperties().get("restServiceDefaultUri");
        if (defaultUri != null && defaultUri.endsWith("/")) {
            defaultUri = defaultUri.substring(0, defaultUri.length()-1);
        }
        if (null == defaultUri || defaultUri.trim().isEmpty() || !defaultUri.contains("://")) {
        	defaultUri = "http://127.0.0.1:8090";
        }
        String defaultEndpointUrl = "\""+defaultUri+"\"";

        if (null == endpointUrlStudio || endpointUrlStudio.trim().isEmpty()) {
            endpointUrlStudio = defaultEndpointUrl;
        } else if (!endpointUrlStudio.contains("://")) { // relative
            if (endpointUrlStudio.startsWith("/")) {
                endpointUrlStudio = endpointUrlStudio.substring(1);
            }

            if(!endpointUrlStudio.startsWith("context.")){
            	endpointUrlStudio = defaultEndpointUrl + "+" + endpointUrlStudio;
            }
        }

		boolean isTestContainer = ProcessUtils.isTestContainer(process);

		String className = isTestContainer ? process.getName() + "Test" : process.getName();

		String routeFolderName = "";
	    IProcess baseProcess = ProcessUtils.getTestContainerBaseProcess(process);

	    if (baseProcess != null) {
	        routeFolderName = JavaResourcesHelper.getJobFolderName(baseProcess.getName(), baseProcess.getVersion()) + ".";
	    }

	    routeFolderName = routeFolderName + JavaResourcesHelper.getJobFolderName(process.getName(), process.getVersion());

	    String packageName = codeGenArgument.getCurrentProjectName().toLowerCase() + "." + routeFolderName;

		builder.addParam("resourceClasses", "\"" + packageName + "." + className + "$Service_" + cid + "\"");
		builderRT.addParam("resourceClasses", "\"" + packageName + "." + className + "$Service_" + cid + "\"");

	}

    builder.addParam("features", "\"#features_" + cid + "\"");
    builderRT.addParam("features", "\"#features_" + cid + "\"");

    builder.addParam("inInterceptors", "\"#inInterceptors_" + cid + "\"");
    builderRT.addParam("inInterceptors", "\"#inInterceptors_" + cid + "\"");

    builder.addParam("outInterceptors", "\"#outInterceptors_" + cid + "\"");
    builderRT.addParam("outInterceptors", "\"#outInterceptors_" + cid + "\"");

    builder.addParam("properties", "\"#properties_" + cid + "\"");
    builderRT.addParam("properties", "\"#properties_" + cid + "\"");

    builder.addParam("cxfRsEndpointConfigurer", "\"#endpointConfigurer_" + cid + "\"");
    builderRT.addParam("cxfRsEndpointConfigurer", "\"#endpointConfigurer_" + cid + "\"");

    builder.addParam("providers", "\"#providers\"");
    builderRT.addParam("providers", "\"#providers\"");

    builder.addParam("loggingFeatureEnabled", "\"" + (String) ElementParameterParser.getValue(node, "__LOG_MESSAGES__") + "\"");
    builderRT.addParam("loggingFeatureEnabled", "\"" + (String) ElementParameterParser.getValue(node, "__LOG_MESSAGES__") + "\"");

    java.util.List<java.util.Map<String, String>> tableValues = (java.util.List<java.util.Map<String, String>>) ElementParameterParser.getObjectValue(node, "__ADVARGUMENTS__");
    for (java.util.Map<String, String> map : tableValues) {
        String argName = map.get("NAME").trim();
        String argValue = map.get("VALUE").trim();
        if(argName.startsWith("\"") && argName.endsWith("\"") && argName.length() >= 2) {
			argName = argName.substring(1, argName.length() - 1);
		}
		builder.addParam(argName, argValue);
		builderRT.addParam(argName, argValue);
    }

   	builder.setComponent("cxfrs://");
	builderRT.setComponent("cxfrs://");

	if("".equals(endpointUrlStudio) || endpointUrlStudio == null || "\"\"".equals(endpointUrlStudio)){
		builder.appendPath("\"/\"");
	}else{
		builder.appendPath(endpointUrlStudio);
	}

	if("".equals(endpointUrlRT) || endpointUrlRT == null || "\"\"".equals(endpointUrlRT)){
		builderRT.appendPath("\"/\"");
	}else{
		builderRT.appendPath(endpointUrlRT);
	}

    String uriRT = builderRT.build();

    String uriStudio = builder.build();

    String responseClass = "javax.ws.rs.core.Response.class";
	if (node.getIncomingConnections().isEmpty()) {
%>
		from(inOSGi || inMS ?<%=uriRT%>:<%=uriStudio%>)
		.process(new org.apache.camel.Processor() {
				public void process(org.apache.camel.Exchange exchange) throws Exception {
					org.apache.camel.Message inMessage = exchange.getIn();
					inMessage.setHeader("http_query",
						org.apache.cxf.jaxrs.utils.JAXRSUtils.getStructuredParams((String) inMessage.getHeader(org.apache.camel.Exchange.HTTP_QUERY), "&", false, false));
				}
			})
<%
	} else {

		if ("MANUAL".equals(ElementParameterParser.getValue(node, "__SERVICE_TYPE__"))) {
			String acceptType = paramsHelper.getVisibleStringParam("__ACCEPT_TYPE__");
			String responseBean = paramsHelper.getVisibleStringParam("__RESPONSE_BEAN__");
			responseClass = "*/*".equals(acceptType) ? "String.class" : "org.w3c.dom.Document.class";
			responseClass = responseBean == null || responseBean.isEmpty() ? responseClass : responseBean + ".class";
			String contentType = paramsHelper.getVisibleStringParam("__CONTENT_TYPE__");
%>
		.setHeader(org.apache.camel.Exchange.HTTP_PATH, <%=ElementParameterParser.getValue(node, "__PATH__")%>)
		.setHeader(org.apache.camel.Exchange.HTTP_METHOD, constant("<%=ElementParameterParser.getValue(node, "__HTTP_METHOD__")%>"))
<% if (!acceptType.isEmpty()) { %>
		.setHeader(org.apache.camel.Exchange.ACCEPT_CONTENT_TYPE, constant("<%=acceptType%>"))
<% } %>
<% if (!contentType.isEmpty()) { %>
		.setHeader(org.apache.camel.Exchange.CONTENT_TYPE, constant("<%=contentType%>"))
<% }
} else { // RESOURCECLASS
%>
		.setHeader(org.apache.camel.component.cxf.common.message.CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, constant(Boolean.FALSE))
		.setHeader(org.apache.camel.component.cxf.common.message.CxfConstants.OPERATION_NAME, <%=ElementParameterParser.getValue(node, "__RESOURCE_OPERATION__")%>)
<% } %>
<% if (paramsHelper.getBoolParam("__ENABLE_CORRELATION__")) { %>
		.process(new org.apache.camel.Processor() {
				public void process(org.apache.camel.Exchange exchange) throws Exception {
					correlationIDCallbackHandler_<%=cid%>.setCorrelationId(simple(<%=paramsHelper.getVisibleStringParam("__CORRELATION_VALUE__")%>).evaluate(exchange, String.class));
				}
			})
<% } %>
		.inOut(inOSGi?<%=uriRT%>:<%=uriStudio%>)
		.unmarshal(new  org.apache.camel.spi.DataFormat() {
			public java.lang.Object unmarshal(org.apache.camel.Exchange exchange, java.io.InputStream is) throws java.lang.Exception {
		   	java.lang.Object b = exchange.getOut().getBody();
		   	if(b instanceof org.apache.cxf.jaxrs.impl.ResponseImpl){
		   		org.apache.cxf.jaxrs.impl.ResponseImpl r = (org.apache.cxf.jaxrs.impl.ResponseImpl)b;
		   		if ("javax.ws.rs.core.Response.class".equalsIgnoreCase("<%=responseClass%>")) {
		   			return <%=responseClass%>.cast(r);
		   		}
		   		int status = r.getStatus();
		   		if ((status < 200 || status == 204) && r.getLength() <= 0 || status >= 300) {
		   			return null;
		   		}
		   		return r.doReadEntity(<%=responseClass%>, <%=responseClass%>, new java.lang.annotation.Annotation[]{});
		   	}
		   	return b;
		   }
		   public void marshal(org.apache.camel.Exchange exchange, Object o, java.io.OutputStream os)
					throws Exception {}
		})
<%
	}
%>
